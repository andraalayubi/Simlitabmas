// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_type {
  ketua_rg
  kaprodi
  dosen
  admin
}

enum config_type {
  system
  user
  proposal
}

enum proposal_suggestion_status {
  tersimpan
  menunggu
  ditolak
  diterima
  aktif
  selesai
}

enum degree {
  S1
  S2
  S3
}

enum evaluation_phase {
  proposal
  progress_1
  progress_2
  progress_3
  final
}

model config {
  id          Int          @id @default(autoincrement())
  name        String?
  value       Json?
  file        String?
  default     Boolean?
  config_type config_type?

  @@map("configs")
}

model user {
  id        Int        @id @default(autoincrement())
  name      String?
  user_type user_type?
  password  String?
  username  String?
  email     String?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  log           log[]
  user_profile  user_profile?
  lecturer      lecturer[]
  refresh_token refresh_token?

  @@map("users")
}

model refresh_token {
  id      Int    @id @default(autoincrement())
  token   String
  user_id Int    @unique

  user user? @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  @@map("refresh_tokens")
}

model user_profile {
  id          Int     @id @default(autoincrement())
  user_id     Int     @unique
  lecturer_id Int     @unique
  bio         String?
  gender      String?
  profile_pic String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     user?     @relation(fields: [user_id], references: [id])
  lecturer lecturer? @relation(fields: [lecturer_id], references: [id])

  @@map("user_profiles")
}

model lecturer {
  id                Int      @id @default(autoincrement())
  name              String
  research_group_id Int?
  department_id     Int?
  nidn              String?
  nip               String?
  degree            Json?
  is_ketua_rg       Boolean?
  position_id       Int?
  signature_url     String?
  user_id           Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  research_group research_group? @relation(fields: [research_group_id], references: [id])
  department     department?     @relation(fields: [department_id], references: [id])
  position       position?       @relation(fields: [position_id], references: [id])
  user           user?           @relation(fields: [user_id], references: [id])

  proposal_suggestion proposal_suggestion[]
  lecturer_member     lecturer_member[]
  review              review[]
  user_profile        user_profile?

  @@map("lecturers")
}

model research_group {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  lecturer            lecturer[]
  proposal_suggestion proposal_suggestion[]

  @@map("research_groups")
}

model department {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  lecturer lecturer[]

  @@map("departments")
}

model year_research {
  id          Int      @id @default(autoincrement())
  year        Int
  open_date   DateTime
  closed_date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  proposal_suggestion proposal_suggestion[]

  @@map("year_researches")
}

model position {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  lecturer        lecturer[]
  position_schema position_schema[]

  @@map("postions")
}

model position_schema {
  id          Int @id @default(autoincrement())
  schema_id   Int
  position_id Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  schema   schema?   @relation(fields: [schema_id], references: [id])
  position position? @relation(fields: [position_id], references: [id])

  @@map("position_schemas")
}

model schema {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  max_cost    BigInt?
  min_degree  degree?
  is_student  Boolean?
  is_partner  Boolean?
  is_lecturer Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  position_schema            position_schema[]
  proposal_suggestion        proposal_suggestion[]
  cost_category              cost_category[]
  evaluation                 evaluation[]
  external_document_category external_document_category[]

  @@map("schemas")
}

model proposal_suggestion {
  id                Int                         @id @default(autoincrement())
  year_research_id  Int?
  schema_id         Int?
  lecturer_id       Int?
  research_group_id Int?
  status            proposal_suggestion_status?
  is_active         Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  year_research  year_research?  @relation(fields: [year_research_id], references: [id])
  schema         schema?         @relation(fields: [schema_id], references: [id])
  lecturer       lecturer?       @relation(fields: [lecturer_id], references: [id])
  research_group research_group? @relation(fields: [research_group_id], references: [id])

  lecturer_member    lecturer_member[]
  student_member     student_member[]
  vendor_member      vendor_member[]
  suggestion_cost    suggestion_cost[]
  additonal_document additional_document[]
  external_document  external_document[]
  review             review[]
  proposal           proposal?

  @@map("proposal_suggestions")
}

model proposal {
  id                     Int    @id @default(autoincrement())
  proposal_suggestion_id Int    @unique
  name                   String
  title                  String
  abstract               Json?
  keyword                Json?
  background             Json?
  purpose                Json?
  method                 Json?
  literature_review      Json?
  bibliography           Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  suggestion proposal_suggestion @relation(fields: [proposal_suggestion_id], references: [id])

  @@map("proposals")
}

model lecturer_member {
  id                     Int      @id @default(autoincrement())
  proposal_suggestion_id Int
  lecturer_id            Int
  name                   String
  research_group_id      Int?
  department_id          Int?
  nip                    String?
  degree                 Json?
  is_ketua_rg            Boolean?
  position_id            Int?
  signature_url          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  proposal_suggestion proposal_suggestion @relation(fields: [proposal_suggestion_id], references: [id])
  lecturer            lecturer            @relation(fields: [lecturer_id], references: [id])

  @@map("lecturer_members")
}

model student_member {
  id                     Int    @id @default(autoincrement())
  proposal_suggestion_id Int
  name                   String
  nrp                    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  proposal_suggestion proposal_suggestion @relation(fields: [proposal_suggestion_id], references: [id])

  @@map("student_members")
}

model vendor_member {
  id                     Int     @id @default(autoincrement())
  proposal_suggestion_id Int
  name                   String
  description            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  proposal_suggestion proposal_suggestion @relation(fields: [proposal_suggestion_id], references: [id])

  @@map("vendor_members")
}

model suggestion_cost {
  id                     Int     @id @default(autoincrement())
  name                   String
  proposal_suggestion_id Int
  cost_category_id       Int
  total                  Float?
  description            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  proposal_suggestion proposal_suggestion @relation(fields: [proposal_suggestion_id], references: [id])
  cost_category       cost_category       @relation(fields: [cost_category_id], references: [id])

  @@map("suggestion_costs")
}

model cost_category {
  id        Int    @id @default(autoincrement())
  schema_id Int
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  schema          schema            @relation(fields: [schema_id], references: [id])
  suggestion_cost suggestion_cost[]

  @@map("cost_categories")
}

model additional_document {
  id                     Int     @id @default(autoincrement())
  proposal_suggestion_id Int
  name                   String
  content                String?
  file_url               String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  proposal_suggestion proposal_suggestion @relation(fields: [proposal_suggestion_id], references: [id])

  @@map("additional_documents")
}

model external_document {
  id                            Int     @id @default(autoincrement())
  name                          String
  proposal_suggestion_id        Int
  external_document_category_id Int
  description                   String?
  file_url                      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  proposal_suggestion        proposal_suggestion        @relation(fields: [proposal_suggestion_id], references: [id])
  external_document_category external_document_category @relation(fields: [external_document_category_id], references: [id])

  @@map("external_documents")
}

model log {
  id      Int     @id @default(autoincrement())
  table   String
  audit   String?
  user_id Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  user user? @relation(fields: [user_id], references: [id])

  @@map("logs")
}

model evaluation {
  id               Int               @id @default(autoincrement())
  name             String
  schema_id        Int
  evaluation_phase evaluation_phase?
  score_weight     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  schema schema   @relation(fields: [schema_id], references: [id])
  review review[]

  @@map("evaluations")
}

model review {
  id                     Int     @id @default(autoincrement())
  evaluation_id          Int
  lecturer_id            Int
  proposal_suggestion_id Int
  note                   String?
  score                  Float?
  status                 String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  evaluation          evaluation          @relation(fields: [evaluation_id], references: [id])
  lecturer            lecturer            @relation(fields: [lecturer_id], references: [id])
  proposal_suggestion proposal_suggestion @relation(fields: [proposal_suggestion_id], references: [id])

  @@map("reviews")
}

model external_document_category {
  id          Int     @id @default(autoincrement())
  schema_id   Int
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  schema            schema              @relation(fields: [schema_id], references: [id])
  external_document external_document[]

  @@map("external_document_categories")
}
